#set($controllerFolder="web")
#set($serviceFolder="service")
#set($entityFolder="entity")
#set($controllerSuffix="Controller")
#set($ServiceSuffix="Service")
#set($add="add")
#set($edit="edit")
#set($get="get")
#set($del="del")
#set($list="List")
#set($page="Page")
#set($getAll="getAll")

package $meta.pkgName.$controllerFolder;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hongguaninfo.hgdf.adp.core.aop.log.UserLog;
import com.hongguaninfo.hgdf.adp.core.base.BasePage;
import com.hongguaninfo.hgdf.adp.core.exception.BizException;
import com.hongguaninfo.hgdf.core.utils.exception.BaseException;
import com.hongguaninfo.hgdf.adp.core.interceptor.RepeatSubmitToken;
import com.hongguaninfo.hgdf.adp.core.templete.HttpTemplete;
import com.hongguaninfo.hgdf.adp.core.templete.OperateTemplete;
import com.hongguaninfo.hgdf.adp.shiro.conf.Auths;

import $meta.pkgName.$serviceFolder.$meta.className$ServiceSuffix;
import $meta.pkgName.$entityFolder.$meta.className;

 /**
 * $meta.tableDesc: $meta.tableName
 * controller $meta.sLayer
 * @author henry
 */

@Controller
// To fill the need URL such as: "/ sys/variable
@RequestMapping("/$meta.firstLowertableName")
public class $meta.className$controllerSuffix {

	@Autowired
	private $meta.className$ServiceSuffix $meta.firstLowertableName$ServiceSuffix;

	/**
	 * REMARK
	 *
	 * @param pageRequest
	 * @param response
	 * @param request
	 */
	@RequestMapping("/show$meta.className")
	@RequiresPermissions(Auths.$meta.tableNameUC)
	public String show$meta.className
	(HttpServletRequest request,
            HttpServletResponse response, Model model) {
		OperateTemplete templete = new HttpTemplete(request) {
            protected void doSomething() throws BaseException {
                str = "$meta.firstLowertableName
                _show";
            }
        };
        return templete.operateModel();
	}

	/**
	 * REMARK
	 *
	 * Show all content and can paging
	 */
	@RequestMapping("/list")
    @ResponseBody
    @RequiresPermissions(Auths.$meta.tableNameUC)
    public Map $get$meta.className$list (final $meta.className $meta.firstLowertableName , final BasePage pageRequest,
            HttpServletResponse response, HttpServletRequest request) {
        OperateTemplete templete = new HttpTemplete(request) {
            protected void doSomething() throws BizException {
                $meta.firstLowertableName$ServiceSuffix.
                $get$meta.className$list
                (pageRequest, $meta.firstLowertableName, map);
            }
        };
        return templete.operate();
    }


	/**
	 * REMARK
	 *
	 * Add data, through the sysLog can see detailed add information
	 */
    @RequestMapping("/add")
    @ResponseBody
    @RepeatSubmitToken(removeToken = true)
    @RequiresPermissions(Auths.$meta.tableNameUC
    _ADD)
    @UserLog(code = "add$meta.className", name = "add $meta.className", remarkClass = $meta.className
    .class)
    public Map add$meta.className (@Valid final $meta.className vo, BindingResult result,
            HttpServletResponse response, final HttpServletRequest request) {
        OperateTemplete templete = new HttpTemplete(request, result) {
            protected void doSomething() throws BizException {
                if (doValidate()) {
                    $meta.firstLowertableName$ServiceSuffix.
                    add$meta.className
                    (vo);
                }
            }
        };
        return templete.operate();
    }

	/**
	 * REMARK
	 *
	 * update data
	 */
    @RequestMapping("/update")
    @ResponseBody
    @RequiresPermissions(Auths.$meta.tableNameUC
    _EDIT)
    @UserLog(code = "edit$meta.className", name = "update $meta.className", remarkClass = $meta.className
    .class)
    public Map edit$meta.className (final $meta.className vo, HttpServletResponse response,
            final HttpServletRequest request) {
        OperateTemplete templete = new HttpTemplete(request) {
            protected void doSomething() throws BizException {
				$meta.firstLowertableName$ServiceSuffix.
                update$meta.className
                (vo);    
            }
        };
        return templete.operate();
    }

	/**
	 * REMARK
	 *
	 * Through the id delete a data
	 */
    @RequestMapping("/delete")
    @ResponseBody
    @RequiresPermissions(Auths.$meta.tableNameUC
    _DELETE)
    @UserLog(code = "delete$meta.className", name = "delete $meta.className", remarkClass = Integer.class)
    public Map delete$meta.className (final Integer id, HttpServletResponse response,
            final HttpServletRequest request) {
        OperateTemplete templete = new HttpTemplete(request) {
            protected void doSomething() throws BizException {
            $meta.firstLowertableName$ServiceSuffix.
                delete$meta.className
                (id);    
            }
        };
        return templete.operate();
    }

	/**
	 * REMARK
	 *
	 * Through the id inquires the out a data
	 */
	@RequestMapping(value = "/$meta.firstLowertableName/{id}")
    @RequiresPermissions(Auths.$meta.tableNameUC
    _VIEW)
	public String show$meta.className
	Detail (@PathVariable int id,
            HttpServletRequest request, HttpServletResponse response,
            Model model) throws BizException {
        model.addAttribute("id", id);
        model.addAttribute("$meta.firstLowertableName",
        $meta.firstLowertableName$ServiceSuffix.
                $meta.className $get$meta.className$byId
                (id);
        OperateTemplete templete = new HttpTemplete(request) {
            protected void doSomething() throws BaseException {
                 str = "$meta.firstLowertableName
                _detail";
            }
        };
        return templete.operateModel();
    }

}
